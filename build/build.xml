<?xml version="1.0" encoding="UTF-8"?>

<project name="CodeShelfUX" default="" basedir="../">

	<description>CodeShelf UX Project</description>

	<property name="build.dir" value="${basedir}/build" />

	<property name="build.lib.dir" value="${build.dir}/lib" />
	<property name="src.dir" value="${basedir}/src" />
	<property name="uncompiled.js.dir" value="${basedir}/src/js_uncompiled" />
	<property name="css.dir" value="${basedir}/src/css" />
	<property name="html.dir" value="${basedir}/src/html" />
	<property name="images.dir" value="${basedir}/src/images" />
	<property name="icons.dir" value="${basedir}/src/icons" />
	<property name="libs.dir" value="${basedir}/lib" />
	<property name="productivity.dir" value="${basedir}/productivity" />

	<property name="target.dir" value="${basedir}/target" />
	<property name="target.web.dir" location="${target.dir}/web" />
	<property name="target.coverage.dir" location="${target.dir}/coverage" />

	<property name="target.compiled.js.dir" value="${target.dir}/js_compiled" />

	<!-- load ant contrib task definitions from build lib directory -->
	<taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${build.lib.dir}/ant-contrib-1.0b3.jar"/>

	<macrodef name="copy-libraries-for-deployment">
	  <sequential>
		<copy todir="${target.web.dir}">
			<fileset dir="${basedir}">
				<include name="lib/AngularJS/**" />
				<include name="lib/jquery-ext/**" />
				<include name="lib/jquery/**" />
				<include name="lib/jquery-ui/*.js" />
				<include name="lib/jquery-ui/**/*.css" />
				<include name="lib/jquery-ui/**/images/**" />
				<include name="lib/moment/min/moment.min.js" />
				<include name="lib/TwitterBootstrap/**" />
				<include name="lib/UIBootstrap/**" />
				<include name="lib/angular-*/**" />
				<include name="lib/SlickGrid/**" />
			</fileset>
			<fileset dir="${src.dir}">
				<include name="fonts/**" />
			</fileset>
		</copy>
	  </sequential>
	</macrodef>

	<target name="env-init">
		<property environment="env" />

		<!-- <echoproperties/> -->

	    <property name="username" value="${user.name}" />
		<exec executable="hostname" outputproperty="hostname"/>

		<!-- load generic properties -->
		<echo>User: ${username}</echo>
		<echo>Host Name: ${hostname}</echo>

		<!-- load environment specific properties -->
		<property name="build.local.properties" value="${basedir}/build/user.build.properties/${username}-${hostname}.properties" />
		<if>
			<available file="${build.local.properties}"/>
			<then>
				<echo>Loading local properties from ${basedir}/build/user.build.properties/${username}-${hostname}.properties</echo>
				<property file="${build.local.properties}"/>
			</then>
			<else>
				<fail>Unable to find local build properties file at ${build.local.properties}. Please create it.</fail>
			</else>
		</if>

		<!-- load generic properties -->
		<echo>Loading generic properties from ${basedir}\build\build.properties</echo>
		<property file="${basedir}\build\build.properties"/>

		<echo>Using Python located at ${python.exec}</echo>

	</target>

	<taskdef resource="pyAntTasks.properties">
		<classpath>
			<pathelement location="${build.dir}/lib/pyAntTasks-1.3.3.jar" />
		</classpath>
	</taskdef>

	<target name="clean">
		<delete includeemptydirs="true" failonerror="false" verbose="true">
			<fileset dir="${target.dir}" defaultExcludes="false" includes="**/*" />
		</delete>
	</target>

	<target name="prep.dirs">
		<mkdir dir="${target.dir}" />
		<mkdir dir="${target.coverage.dir}" />
		<mkdir dir="${target.compiled.js.dir}" />
		<mkdir dir="${target.web.dir}" />
		<mkdir dir="${target.web.dir}/js" />
		<mkdir dir="${target.web.dir}/icons" />
		<mkdir dir="${target.web.dir}/images" />
	</target>

	<target name="lint">
		<exec command="/usr/local/bin/gjslint">
			<arg value="-r" />
			<arg value="src/js_uncompiled" />
			<arg value="--nojsdoc" />
		</exec>
	</target>

	<target name="fix.style">
		<exec command="/usr/local/bin/fixjsstyle">
			<arg value="-r" />
			<arg value="src/js_uncompiled" />
			<arg value="--nojsdoc" />
		</exec>
	</target>

    <target name="update.productivity.libs">
        <exec dir="${productivity.dir}" executable="./update-dependencies.sh" osfamily="unix" failonerror="true" />
    </target>

	<target name="generate.templates" depends="prep.dirs">
		<!-- if we're calling generate templates directly then create the (safer) production version. -->
		<condition property="deploy.globals" value="${basedir}/src/templates/globals.testing" >
		   <not>
		      <isset property="deploy.globals"/>
		   </not>
		</condition>

		<java jar="./lib/GoogleClosureTemplates/SoyToJsSrcCompiler.jar" fork="true" failonerror="true" maxmemory="128m">
			<arg value="--shouldProvideRequireSoyNamespaces" />
			<arg value="--compileTimeGlobalsFile" />
			<arg value="${deploy.globals}" />
			<arg value="--outputPathFormat" />
			<arg value="./src/js_uncompiled/{INPUT_FILE_NAME_NO_EXT}_gen.js" />
			<arg value="./src/templates/codeshelf_templates.soy" />
		</java>
	</target>

	<target name="generate.css" depends="prep.dirs">
		<echo>${user.dir}</echo>
		<java jar="./lib/GoogleClosureStylesheets/closure-stylesheets-20111230.jar" fork="true" failonerror="true" maxmemory="128m">
			<arg value="--pretty-print" />
			<arg value="--output-file" />
			<arg value="./src/css/codeshelf.css" />
			<arg value="./src/css/codeshelf.gss" />
		</java>
	</target>

	<target name="generate.deps" depends="env-init,prep.dirs">
		<echo>${basedir}</echo>
		<py-run script="./lib/GoogleClosureLibrary/closure/bin/build/depswriter.py" pythonpath="${basedir}" optimize="0" python="${python.exec}">
			<arg value="--root_with_prefix=../lib/Arrowlets ../../../Arrowlets" />
			<arg value="--root_with_prefix=../lib/Bacon ../../../Bacon" />
			<arg value="--root_with_prefix=../lib/GoogleClosureLibrary ../../" />
			<arg value="--root_with_prefix=../lib/GoogleClosureTemplates ../../../GoogleClosureTemplates" />
			<arg value="--root_with_prefix=../lib/jquery-ext ../../../jquery-ext" />
			<arg value="--root_with_prefix=../lib/Raphael ../../../Raphael" />
			<arg value="--root_with_prefix=../lib/SlickGrid ../../../SlickGrid" />
			<arg value="--root_with_prefix=../lib/TwitterBootstrap ../../../TwitterBootstrap" />
			<arg value="--root_with_prefix=../src/js_uncompiled ../../../../src/js_uncompiled" />
			<arg value="--output_file=../src/js_uncompiled/deps.js" />
		</py-run>
	</target>

	<!-- These are the default compile options if you call compile without deploy. -->
	<target name="set.defaults">
		<condition property="webapp.hostname" value="localhost">
			<not>
				<isset property="webapp.hostname" />
			</not>
		</condition>
		<condition property="compiler.options.optimization" value="--compiler_flags=--compilation_level=ADVANCED_OPTIMIZATIONS">
			<not>
				<isset property="webapp.hostname" />
			</not>
		</condition>
		<condition property="compiler.options.format" value="--compiler_flags=--source_map_format=V3">
			<not>
				<isset property="webapp.hostname" />
			</not>
		</condition>
		<condition property="compiler.options.map" value="--compiler_flags=--create_source_map=${target.compiled.js.dir}/codeshelf.map">
			<not>
				<isset property="webapp.hostname" />
			</not>
		</condition>
		<condition property="compiler.options.wrapper" value="--compiler_flags=--output_wrapper=&quot;(function(){%output%})();&quot;">
			<not>
				<isset property="webapp.hostname" />
			</not>
		</condition>
		<condition property="compiler.options.pretty" value="--compiler_flags=--formatting=PRETTY_PRINT">
			<not>
				<isset property="webapp.hostname" />
			</not>
		</condition>
		<condition property="compiler.options.debug" value="--compiler_flags=--source_map_format=V3">
			<not>
				<isset property="webapp.hostname" />
			</not>
		</condition>
	</target>

	<target name="compile" depends="prep.dirs, generate.templates, generate.css, generate.deps, set.defaults">
		<py-run script="./lib/GoogleClosureLibrary/closure/bin/build/closurebuilder.py" dir="${basedir}" optimize="0" python="${python.exec}" pythonpath="${basedir}">
			<arg value="--root=./src/js_uncompiled" />
			<arg value="--root=./lib/GoogleClosureLibrary/closure/" />
			<arg value="--root=./lib/GoogleClosureLibrary/third_party/" />
			<arg value="--root=./lib/GoogleClosureTemplates/" />
			<arg value="--root=./lib/jquery-ext/" />
			<arg value="--root=./lib/Bacon/" />
			<arg value="--root=./lib/SlickGrid/" />
			<arg value="--root=./lib/Raphael/" />
			<arg value="--root=./lib/TwitterBootstrap/" />
			<arg value="--namespace=codeshelf.application" />
			<arg value="--output_mode=compiled" />
			<arg value="--compiler_jar=./lib/GoogleClosureLibrary/compiler.jar" />
			<arg value="--compiler_flags=--output_manifest=${target.compiled.js.dir}/codeshelf.manifest" />
			<arg value="--compiler_flags=--property_map_output_file=${target.compiled.js.dir}/property.map" />
			<arg value="--compiler_flags=--variable_map_output_file=${target.compiled.js.dir}/variable.map" />
			<arg value="--compiler_flags=--externs=./src/js_externs/bacon.js" />
			<arg value="--compiler_flags=--externs=./src/js_externs/moment.js" />
			<arg value="--compiler_flags=--externs=./src/js_externs/ui-bootstrap-tpls-0.10.0.js" />
			<arg value="--compiler_flags=--externs=./src/js_externs/google_maps_api_v3_8.js" />
			<arg value="--compiler_flags=--externs=./src/js_externs/jquery-1.8.js" />
			<arg value="--compiler_flags=--externs=./src/js_externs/jquery-ui.1.8.19.js" />
			<arg value="--compiler_flags=--externs=./src/js_externs/angular-1.3.js" />
			<arg value="--compiler_flags=--externs=./src/js_externs/slickgrid-2.1.js" />
			<arg value="--compiler_flags=--manage_closure_dependencies" />
			<arg value="--compiler_flags=--closure_entry_point=codeshelf.application" />
			<arg value="--compiler_flags=--jscomp_warning=missingProperties" />
			<arg value="--compiler_flags=--angular_pass" />
			<arg value="--compiler_flags=--generate_exports" />
			<arg value="--compiler_flags=--jscomp_warning=checkTypes" />
			<arg value="--compiler_flags=--logging_level=FINEST" />
			<arg value="--compiler_flags=--summary_detail_level=3" />
			<arg value="--output_file=${target.compiled.js.dir}/codeshelf.js" />
			<arg value="${compiler.options.optimization}" />
			<arg value="${compiler.options.format}" />
			<arg value="${compiler.options.map}" />
			<arg value="${compiler.options.wrapper}" />
			<arg value="${compiler.options.pretty}" />
			<arg value="${compiler.options.debug}" />
		</py-run>

		<!-- Prepare the websocket link for the target host. -->
		<echo>Webapp hostname: ${webapp.hostname}</echo>
		<echo>${target.compiled.js.dir}/codeshelf.js</echo>
		<replace file="${target.compiled.js.dir}/codeshelf.map" token="src/js_uncompiled" value="../js_uncompiled" />
		<replace file="${target.compiled.js.dir}/codeshelf.map" token="lib/Bacon" value="../lib/Bacon" />
		<replace file="${target.compiled.js.dir}/codeshelf.map" token="lib/GoogleClosureLibrary" value="../lib/GoogleClosureLibrary" />
		<replace file="${target.compiled.js.dir}/codeshelf.map" token="lib/jquery-ext" value="../lib/jquery-ext" />
		<replace file="${target.compiled.js.dir}/codeshelf.map" token="lib/Raphael" value="../lib/Raphael" />
		<replace file="${target.compiled.js.dir}/codeshelf.map" token="lib/SlickGrid" value="../lib/SlickGrid" />
		<replace file="${target.compiled.js.dir}/codeshelf.map" token="lib/TwitterBootstrap" value="../lib/TwitterBootstrap" />
		<echo file="${target.compiled.js.dir}/codeshelf.js" append="true">
//# sourceMappingURL=/js/codeshelf.map</echo>
	</target>



    <target name="build.productivity" depends="update.productivity.libs">
		<exec dir="${productivity.dir}" executable="./build.sh" failonerror="true" />
        <copy todir="${target.web.dir}/productivity">
            <fileset dir="${productivity.dir}">
                <exclude name="node_modules/**" />
            </fileset>
        </copy>
    </target>
	<!-- Build the web app from the compiled pieces. /-->
	<target name="build.webapp" depends="clean, generate.templates, generate.css, generate.deps, compile">

		<copy todir="${target.web.dir}/js">
		    <fileset dir="${uncompiled.js.dir}">
				<include name="codeshelfAngularApp.js" />
			</fileset>
			<fileset dir="${target.compiled.js.dir}">
				<include name="codeshelf.js" />
				<include name="codeshelf.map" />
			</fileset>
		</copy>
		<copy todir="${target.web.dir}/css">
			<fileset dir="${css.dir}">
				<include name="*.css" />
				<include name="images/**.*" />
			</fileset>
		</copy>

		<copy todir="${target.web.dir}">
			<fileset dir="${html.dir}">
				<include name="favicon.gif" />
				<include name="codeshelf.html" />
				<include name="signup.html" />
				<include name="signin.html" />
				<include name="version.json" />
				<include name="partials/**" />
			</fileset>
		</copy>

		<copy todir="${target.web.dir}/images">
			<fileset dir="${images.dir}">
				<include name="*.**" />
			</fileset>
		</copy>

		<copy todir="${target.web.dir}">
			<fileset dir="${icons.dir}">
			</fileset>
		</copy>

		<copy todir="${target.web.dir}/icons">
			<fileset dir="${icons.dir}">
				<include name="*.**" />
			</fileset>
		</copy>
	</target>

	<target name="deploy-production">

		<property name="webapp.hostname" value="test.codeshelf.com" />
		<property name="compiler.options.optimization" value="--compiler_flags=--compilation_level=ADVANCED_OPTIMIZATIONS" />
		<property name="compiler.options.format" value="--compiler_flags=--source_map_format=V3" />
		<property name="compiler.options.map" value="--compiler_flags=--create_source_map=${target.compiled.js.dir}/codeshelf.map" />
		<property name="compiler.options.wrapper" value="--compiler_flags=--output_wrapper=&quot;(function(){%output%})();&quot;" />
		<property name="compiler.options.pretty" value="--compiler_flags=--source_map_format=V3" />
		<property name="compiler.options.debug" value="--compiler_flags=--source_map_format=V3" />
		<property name="deploy.globals" value="${basedir}/src/templates/globals.deploy" />

		<antcall target="build.webapp">
		</antcall>

		<copy-libraries-for-deployment />

		<scp todir="codeshelf@test.codeshelf.com:/opt/codeshelf/web/app" verbose="true" keyfile="${user.home}/.ssh/codeshelf">
			<fileset dir="${target.web.dir}">
				<include name="**/*" />
				<exclude name="**/*.map" />
				<!--modified>   This has never worked very well.
					<param name="cache.cachefile" value="${build.dir}/webapp.scp.cache" />
				</modified-->
			</fileset>
		</scp>
	</target>

        <target name="build-for-stage">

                <property name="webapp.hostname" value="test.codeshelf.com" />
                <property name="compiler.options.optimization" value="--compiler_flags=--compilation_level=ADVANCED_OPTIMIZATIONS" />
                <property name="compiler.options.format" value="--compiler_flags=--source_map_format=V3" />
                <property name="compiler.options.map" value="--compiler_flags=--create_source_map=${target.compiled.js.dir}/codeshelf.map" />
                <property name="compiler.options.wrapper" value="--compiler_flags=--output_wrapper=&quot;(function(){%output%})();&quot;" />
                <property name="compiler.options.pretty" value="--compiler_flags=--source_map_format=V3" />
                <property name="compiler.options.debug" value="--compiler_flags=--source_map_format=V3" />
                <property name="deploy.globals" value="${basedir}/src/templates/globals.deploy" />

                <antcall target="build.webapp">
                </antcall>
                <antcall target="build.productivity">
                </antcall>


				<copy-libraries-for-deployment />
	</target>

	<target name="deploy-localhost">

		<property name="webapp.hostname" value="localhost" />
		<property name="compiler.options.optimization" value="--compiler_flags=--compilation_level=ADVANCED_OPTIMIZATIONS" />
		<property name="compiler.options.format" value="--compiler_flags=--source_map_format=V3" />
		<property name="compiler.options.map" value="--compiler_flags=--create_source_map=${target.compiled.js.dir}/codeshelf.map" />
		<property name="compiler.options.wrapper" value="--compiler_flags=--output_wrapper=&quot;(function(){%output%})();&quot;" />
		<property name="compiler.options.pretty" value="--compiler_flags=--source_map_format=V3" />
		<property name="compiler.options.debug" value="--compiler_flags=--source_map_format=V3" />
		<property name="deploy.globals" value="${basedir}/src/templates/globals.testing" />

		<antcall target="build.webapp">
		</antcall>

		<antcall target="build.productivity">
		</antcall>

		<copy todir="${target.web.dir}">
			<fileset dir="${src.dir}">
				<include name="js_uncompiled/*.js" />
			</fileset>
		</copy>

		<copy-libraries-for-deployment />
	</target>
</project>
