<?xml version="1.0" encoding="UTF-8"?>

<project name="CodeShelfUX" default="" basedir="../">

	<description>
		CodeShelf build script.
    </description>

	<property name="build.dir" value="${basedir}/build" />
	<property name="build.lib.dir" value="${build.dir}/lib" />
	<property name="src.dir" value="${basedir}/src" />
	<property name="uncompiled.js.dir" value="${basedir}/src/js_uncompiled" />
	<property name="css.dir" value="${basedir}/src/css" />
	<property name="html.dir" value="${basedir}/src/html" />
	<property name="images.dir" value="${basedir}/src/images" />
	<property name="icons.dir" value="${basedir}/src/icons" />
	<property name="libs.dir" value="${basedir}/lib" />

	<property name="target.dir" value="${basedir}/target" />
	<property name="target.web.dir" location="${target.dir}/web" />
	<property name="target.coverage.dir" location="${target.dir}/coverage" />

	<property name="target.compiled.js.dir" value="${target.dir}/js_compiled" />

	<property name="pythonexec" value="/usr/bin/python" />

	<taskdef resource="pyAntTasks.properties">
		<classpath>
			<pathelement location="${build.dir}/lib/pyAntTasks-1.3.3.jar" />
		</classpath>
	</taskdef>

	<taskdef name="jgenhtml" classname="com.googlecode.jgenhtml.ant.JGenHtmlTask" classpath="${build.dir}/lib/jgenhtml-1.5.jar" />

	<target name="clean">
		<delete includeemptydirs="true" failonerror="false" verbose="true">
			<fileset dir="${target.dir}" defaultExcludes="false" includes="**/*" />
		</delete>
	</target>

	<target name="prep.dirs">
		<mkdir dir="${target.dir}" />
		<mkdir dir="${target.coverage.dir}" />
		<mkdir dir="${target.compiled.js.dir}" />
		<mkdir dir="${target.web.dir}" />
		<mkdir dir="${target.web.dir}/js" />
		<mkdir dir="${target.web.dir}/icons" />
		<mkdir dir="${target.web.dir}/images" />
	</target>

	<target name="lint">
		<exec command="/usr/local/bin/gjslint">
			<arg value="-r" />
			<arg value="src/js_uncompiled" />
			<arg value="--nojsdoc" />
		</exec>
	</target>

	<target name="fix.style">
		<exec command="/usr/local/bin/fixjsstyle">
			<arg value="-r" />
			<arg value="src/js_uncompiled" />
			<arg value="--nojsdoc" />
		</exec>
	</target>

	<target name="generate.templates" depends="prep.dirs">
		<!-- if we're calling generate templates directly then create the (safer) production version. -->
		<condition property="deploy.globals" value="${basedir}/src/templates/globals.testing" >
		   <not>
		      <isset property="deploy.globals"/>
		   </not>
		</condition>

		<java jar="./lib/GoogleClosureTemplates/SoyToJsSrcCompiler.jar" fork="true" failonerror="true" maxmemory="128m">
			<arg value="--shouldProvideRequireSoyNamespaces" />
			<arg value="--compileTimeGlobalsFile" />
			<arg value="${deploy.globals}" />
			<arg value="--outputPathFormat" />
			<arg value="./src/js_uncompiled/{INPUT_FILE_NAME_NO_EXT}_gen.js" />
			<arg value="./src/templates/codeshelf_templates.soy" />
		</java>
	</target>

	<target name="generate.css" depends="prep.dirs">
		<echo>${user.dir}</echo>
		<java jar="./lib/GoogleClosureStylesheets/closure-stylesheets-20111230.jar" fork="true" failonerror="true" maxmemory="128m">
			<arg value="--pretty-print" />
			<arg value="--output-file" />
			<arg value="./src/css/codeshelf.css" />
			<arg value="./src/css/codeshelf.gss" />
		</java>
	</target>

	<target name="generate.deps" depends="prep.dirs">
		<echo>${basedir}</echo>
		<py-run script="./lib/GoogleClosureLibrary/closure/bin/build/depswriter.py" pythonpath="${basedir}" optimize="0" python="${pythonexec}">
			<arg value="--root_with_prefix=../lib/GoogleClosureLibrary ../../" />
			<arg value="--root_with_prefix=../lib/GoogleClosureTemplates ../../../GoogleClosureTemplates" />
			<arg value="--root_with_prefix=../lib/Arrowlets ../../../Arrowlets" />
			<arg value="--root_with_prefix=../lib/JQuery ../../../JQuery" />
			<arg value="--root_with_prefix=../lib/SlickGrid ../../../SlickGrid" />
			<arg value="--root_with_prefix=../lib/Raphael ../../../Raphael" />
			<arg value="--root_with_prefix=../lib/AngularJS ../../../AngularJS" />
			<arg value="--root_with_prefix=../lib/UIBootstrap ../../../UIBootstrap" />
			<arg value="--root_with_prefix=../lib/Bacon ../../../Bacon" />
			<arg value="--root_with_prefix=../src/js_uncompiled ../../../../src/js_uncompiled" />
			<arg value="--output_file=../src/js_uncompiled/deps.js" />
		</py-run>
	</target>

	<!-- These are the default compile options if you call compile without deploy. -->
	<target name="set.defaults">
		<condition property="webapp.hostname" value="localhost">
			<not>
				<isset property="webapp.hostname" />
			</not>
		</condition>
		<condition property="compiler.options.optimization" value="--compiler_flags=--compilation_level=ADVANCED_OPTIMIZATIONS">
			<not>
				<isset property="webapp.hostname" />
			</not>
		</condition>
		<condition property="compiler.options.format" value="--compiler_flags=--source_map_format=V3">
			<not>
				<isset property="webapp.hostname" />
			</not>
		</condition>
		<condition property="compiler.options.map" value="--compiler_flags=--create_source_map=${target.compiled.js.dir}/codeshelf.map">
			<not>
				<isset property="webapp.hostname" />
			</not>
		</condition>
		<condition property="compiler.options.wrapper" value="--compiler_flags=--output_wrapper=&quot;(function(){%output%})();&quot;">
			<not>
				<isset property="webapp.hostname" />
			</not>
		</condition>
		<condition property="compiler.options.pretty" value="--compiler_flags=--formatting=PRETTY_PRINT">
			<not>
				<isset property="webapp.hostname" />
			</not>
		</condition>
		<condition property="compiler.options.debug" value="--compiler_flags=--source_map_format=V3">
			<not>
				<isset property="webapp.hostname" />
			</not>
		</condition>
	</target>

	<target name="compile" depends="prep.dirs, generate.templates, generate.css, generate.deps, set.defaults">
		<py-run script="./lib/GoogleClosureLibrary/closure/bin/build/closurebuilder.py" dir="${basedir}" optimize="0">
			<arg value="--root=./src/js_uncompiled" />
			<arg value="--root=./lib/GoogleClosureLibrary/closure/" />
			<arg value="--root=./lib/GoogleClosureLibrary/third_party/" />
			<arg value="--root=./lib/GoogleClosureTemplates/" />
			<arg value="--root=./lib/JQuery/" />
			<arg value="--root=./lib/Bacon/" />
			<arg value="--root=./lib/SlickGrid/" />
			<arg value="--root=./lib/Raphael/" />
			<arg value="--root=./lib/AngularJS/" />
			<arg value="--root=./lib/UIBootstrap/" />
			<arg value="--namespace=codeshelf.application" />
			<arg value="--output_mode=compiled" />
			<arg value="--compiler_jar=./lib/GoogleClosureLibrary/compiler.jar" />
			<arg value="--compiler_flags=--output_manifest=${target.compiled.js.dir}/codeshelf.manifest" />
			<arg value="--compiler_flags=--property_map_output_file=${target.compiled.js.dir}/property.map" />
			<arg value="--compiler_flags=--variable_map_output_file=${target.compiled.js.dir}/variable.map" />
			<arg value="--compiler_flags=--externs=./src/js_externs/google_maps_api_v3_8.js" />
			<arg value="--compiler_flags=--externs=./src/js_externs/jquery-1.7.js" />
			<arg value="--compiler_flags=--externs=./src/js_externs/jquery-ui.1.8.19.js" />
			<arg value="--compiler_flags=--externs=./src/js_externs/angular-1.2.js" />
			<arg value="--compiler_flags=--manage_closure_dependencies" />
			<arg value="--compiler_flags=--closure_entry_point=codeshelf.application" />
			<arg value="--compiler_flags=--jscomp_warning=missingProperties" />
			<arg value="--compiler_flags=--jscomp_warning=checkTypes" />
			<arg value="--compiler_flags=--logging_level=FINEST" />
			<arg value="--compiler_flags=--summary_detail_level=3" />
			<arg value="--output_file=${target.compiled.js.dir}/codeshelf.js" />
			<arg value="${compiler.options.optimization}" />
			<arg value="${compiler.options.format}" />
			<arg value="${compiler.options.map}" />
			<arg value="${compiler.options.wrapper}" />
			<arg value="${compiler.options.pretty}" />
			<arg value="${compiler.options.debug}" />
		</py-run>

		<!-- Prepare the websocket link for the target host. -->
		<echo>Webapp hostname: ${webapp.hostname}</echo>
		<echo>${target.compiled.js.dir}/codeshelf.js</echo>
		<replace file="${target.compiled.js.dir}/codeshelf.js" token="wss://localhost:8444" value="wss://${webapp.hostname}:8444" summary="true" />

		<replace file="${target.compiled.js.dir}/codeshelf.map" token="src/js_uncompiled" value="../js_uncompiled" />
		<replace file="${target.compiled.js.dir}/codeshelf.map" token="lib/GoogleClosureLibrary" value="../lib/GoogleClosureLibrary" />
		<replace file="${target.compiled.js.dir}/codeshelf.map" token="lib/SlickGrid" value="../lib/SlickGrid" />
		<replace file="${target.compiled.js.dir}/codeshelf.map" token="lib/JQuery" value="../lib/JQuery" />
		<replace file="${target.compiled.js.dir}/codeshelf.map" token="lib/Raphael" value="../lib/Raphael" />
		<echo file="${target.compiled.js.dir}/codeshelf.js" append="true">
//# sourceMappingURL=/js/codeshelf.map</echo>
	</target>

	<!-- Plovr builder. /-->
	<target name="plovr.build">
		<!--	This almost works, except source maps do not have the right paths.
				The compiler option above works for now, but when we need modules it will be a lot easier to use Plovr.
				This patch can make this work right: http://codereview.appspot.com/6346071/
				but we don't need modules yet.  When we need modules revisit this to see if Plovr updated to include the listed patch. -->
		<echo>${basedir}</echo>
		<java jar="./build/plovr-4b3caf2b7d84.jar" fork="true" failonerror="true" maxmemory="128m">
			<arg value="build" />
			<arg value="./build/codeshelf.plovr.config" />
			<arg value="--create_source_map" />
			<arg value="${target.compiled.js.dir}/codeshelf.map" />
		</java>
		<echo file="${target.compiled.js.dir}/codeshelf.js" append="true">
//# sourceMappingURL=/js/codeshelf.map</echo>
	</target>

	<!-- Build the web app from the compiled pieces. /-->
	<target name="build.webapp" depends="clean, generate.templates, generate.css, generate.deps, compile">

		<copy todir="${target.web.dir}/js">
			<fileset dir="${target.compiled.js.dir}">
				<include name="codeshelf.js" />
				<include name="codeshelf.map" />
			</fileset>
		</copy>

		<copy todir="${target.web.dir}/css">
			<fileset dir="${css.dir}">
				<include name="*.css" />
				<include name="images/**.*" />
			</fileset>
		</copy>

		<copy todir="${target.web.dir}">
			<fileset dir="${html.dir}">
				<include name="codeshelf.html" />
				<include name="signup.html" />
				<include name="signin.html" />
			</fileset>
		</copy>

		<copy todir="${target.web.dir}/images">
			<fileset dir="${images.dir}">
				<include name="*.**" />
			</fileset>
		</copy>

		<copy todir="${target.web.dir}">
			<fileset dir="${icons.dir}">
				<include name="favicon.ico" />
			</fileset>
		</copy>

		<copy todir="${target.web.dir}/icons">
			<fileset dir="${icons.dir}">
				<include name="*.**" />
			</fileset>
		</copy>
	</target>

	<!-- Js Test Runner style testing.  (Probably will deprecrate.) /-->
	<target name="test-jstr">
		<junit printsummary="yes" haltonfailure="no" showoutput="yes">
			<sysproperty key="org.codehaus.jstestrunner.commandPattern" value="./build/phantomjs '%1$s' %2$s" />
			<classpath>
				<pathelement location="${build.lib.dir}/junit-4.11.jar" />
				<pathelement location="${build.lib.dir}/jstestrunner-junit-1.0.3.jar" />
			</classpath>
			<batchtest fork="yes" todir="${target.coverage.dir}">
				<fileset dir="./test" includes="**/*" />
			</batchtest>
		</junit>
	</target>

	<!-- This sets up the tests to run with JsTestDriver, captive to the selected browser(s). -->
	<!-- Run this before any of the other tests. -->
	<target name="test-jstd-setup">
		<mkdir dir="${target.coverage.dir}" />
		<java jar="${build.lib.dir}/JsTestDriver-1.3.5.jar" fork="true" failonerror="true" maxmemory="128m">
			<arg value="--config=build/jsTestDriver.uncompiled.conf" />
			<arg value="--port=42442" />
			<arg value="--runnerMode=DEBUG" />
			<arg value="--browser=${build.dir}/open_chrome.sh" />
			<arg value="--testOutput=${target.coverage.dir}" />
			<!--classpath>
				<pathelement location="lib/JsTestDriver-1.3.5.jar" />
				<pathelement location="lib/coverage-1.3.5.jar" />
			</classpath-->
		</java>
	</target>

	<!-- This runs the actual unit tests with JsTestDriver against uncompiled code. -->
	<!-- This test runs stand-alone and doesn't need any other target. -->
	<target name="test-jstd-run-uncompiled">
		<mkdir dir="${target.coverage.dir}" />
		<java jar="build/lib/JsTestDriver-1.3.5.jar" fork="true" failonerror="true">
			<arg value="--config=build/jsTestDriver.uncompiled.conf" />
			<arg value="--reset" />
			<arg value="--runnerMode=DEBUG" />
			<arg value="--tests=all" />
			<arg value="--dryRunFor=all" />
			<arg value="--raiseOnFailure=false" />
			<arg value="--port=42442" />
			<arg value="--browser=open" />
			<arg value="--testOutput=${target.coverage.dir}" />
		</java>

		<!-- Generate HTML coverage reports from the raw LCOV output data. -->
		<!--exec executable="perl" dir="./build">
			<arg value="genhtml" />
			<arg value="../target/coverage/jsTestDriver.conf-coverage.dat" />
			<arg value="- -output-directory=../target/coverage" />
		</exec-->

		<jgenhtml in="../target/coverage/jsTestDriver.conf-coverage.dat" outdir="../target/coverage" config="${build.dir}/lcov.rc" />
	</target>

	<!-- This runs the actual unit tests with JsTestDriver against compiled code. /-->
	<!-- This test runs stand-alone and doesn't need any other target. (Tho' it takes 11 minutes to run!) -->
	<target name="test-jstd-run-compiled">
		<mkdir dir="${target.coverage.dir}" />
		<java jar="build/lib/JsTestDriver-1.3.5.jar" fork="true" failonerror="true">
			<arg value="--config=build/jsTestDriver.compiled.conf" />
			<arg value="--reset" />
			<arg value="--runnerMode=DEBUG" />
			<arg value="--tests=all" />
			<arg value="--dryRunFor=all" />
			<arg value="--raiseOnFailure=false" />
			<arg value="--port=42442" />
			<arg value="--browser=open" />
			<arg value="--testOutput=${target.coverage.dir}" />
		</java>

		<!-- Generate HTML coverage reports from the raw LCOV output data. -->
		<exec executable="perl" dir="./build">
			<arg value="genhtml" />
			<arg value="../target/coverage/jsTestDriver.conf-coverage.dat" />
			<arg value="--output-directory=../target/coverage" />
		</exec>
	</target>

	<target name="deploy-production">

		<property name="webapp.hostname" value="login.codeshelf.io" />
		<property name="compiler.options.optimization" value="--compiler_flags=--compilation_level=ADVANCED_OPTIMIZATIONS" />
		<property name="compiler.options.format" value="--compiler_flags=--source_map_format=V3" />
		<property name="compiler.options.map" value="--compiler_flags=--create_source_map=${target.compiled.js.dir}/codeshelf.map" />
		<property name="compiler.options.wrapper" value="--compiler_flags=--output_wrapper=&quot;(function(){%output%})();&quot;" />
		<property name="compiler.options.pretty" value="--compiler_flags=--source_map_format=V3" />
		<property name="compiler.options.debug" value="--compiler_flags=--source_map_format=V3" />
		<property name="deploy.globals" value="${basedir}/src/templates/globals.deploy" />

		<antcall target="build.webapp">
		</antcall>

		<copy todir="${target.web.dir}">
			<fileset dir="${basedir}">
				<include name="lib/AngularJS/**" />
				<include name="lib/UIBootstrap/**" />
			</fileset>
		</copy>

		<scp todir="codeshelf@login.codeshelf.io:/opt/codeshelf/web/app" verbose="true" keyfile="${user.home}/.ssh/codeshelf">
			<fileset dir="${target.web.dir}">
				<include name="**/*" />
				<exclude name="**/*.map" />
				<modified>
					<param name="cache.cachefile" value="${build.dir}/webapp.scp.cache" />
				</modified>
			</fileset>
		</scp>
	</target>

	<target name="deploy-localhost">

		<hostinfo />
		<echo>Host addr: ${ADDR4} </echo>

		<!--property name="webapp.hostname" value="${ADDR4}" /-->
		<property name="webapp.hostname" value="localhost" />
		<property name="compiler.options.optimization" value="--compiler_flags=--compilation_level=ADVANCED_OPTIMIZATIONS" />
		<property name="compiler.options.format" value="--compiler_flags=--source_map_format=V3" />
		<property name="compiler.options.map" value="--compiler_flags=--create_source_map=${target.compiled.js.dir}/codeshelf.map" />
		<property name="compiler.options.wrapper" value="--compiler_flags=--output_wrapper=&quot;(function(){%output%})();&quot;" />
		<property name="compiler.options.pretty" value="--compiler_flags=--source_map_format=V3" />
		<property name="compiler.options.debug" value="--compiler_flags=--source_map_format=V3" />
		<property name="deploy.globals" value="${basedir}/src/templates/globals.testing" />

		<antcall target="build.webapp">
		</antcall>

		<copy todir="${target.web.dir}">
			<fileset dir="${src.dir}">
				<include name="js_uncompiled/*.js" />
			</fileset>
		</copy>

		<copy todir="${target.web.dir}">
			<fileset dir="${basedir}">
				<include name="lib/**" />
			</fileset>
		</copy>
	</target>
</project>
